.thumb
.syntax unified

.include "gpio_constants.s"     // Register-adresser og konstanter for GPIO
.include "sys-tick_constants.s" // Register-adresser og konstanter for SysTick

.text
	.global Start
	.global SysTick_Handler
	.thumb_func
SysTick_Handler:						//IMPORTANT: The handler must be defined before anything else
	PUSH {R6,R7,R8,R9,R10,R11,R12}
	LDR R0, =tenths						//Tenths address
	LDR R1, =seconds					//Seconds address
	LDR R2, =minutes					//Minutes address
	MOV R3, #10							//Loading 10 to R3, to be used for checking if tenths = 10
	MOV R7, #60							//Loading 60 to R7, to be used for checking if seconds = 10

	LDR R4, [R0]						//Tenths value
	LDR R5, [R1]						//Seconds value
	LDR R6, [R2]						//Minutes value

	ADD R4, R4, #1						//Adding one tenth
	CMP R4, R3							//Checking if tenth = 10

	BNE Update

	LDR R8, =GPIO_BASE					//Filling in data from gpio_constants.s
	LDR R9, =PORT_SIZE
	LDR R10, =LED_PORT

	MUL R9, R9, R10						//R9 is now the total offset to port
	ADD R8, R8, R9						//R8 is now the at the LED PORT
	ADD R8, R8, #GPIO_PORT_DOUTTGL						//R8 is now the address for LED DOUTTGL
	MOV R9, #1							//Creating empty mask for LED check
	LSL R9, R9, #LED_PIN						//R9 IS A READY MASK
	STR R9, [R8]						//TURNS ON LED

	MOV R4, #0							//Resetting tenths
	ADD R5, R5, #1						//Adding a second
	CMP R5, R7							//Checking if seconds = 60

	BNE Update
	MOV R5, #0							//Resetting seconds
	ADD R6, R6, #1						//Adding a minute

Update:
	STR R4, [R0]
	STR R5, [R1]						//Updating current values
	STR R6, [R2]
	POP {R6,R7,R8,R9,R10,R11,R12}
	BX LR								//Return from SysTick interrupt


Start:									//We start by defining our SYSTICK settings

	LDR R0, =SYSTICK_BASE 				//Base address and CTRL address
	LDR R1,	=SYSTICK_LOAD				//LOAD Offset
	LDR R2, =SYSTICK_VAL				//VAL Offset

    ADD R1, R0, R1						//LOAD Address
    ADD R2, R0, R2						//VAL Address

	LDR R3, =0b111						//Activating SYSTICK
	STR R3, [R0]

	LDR R4, =1400000					//A tenth of clock frequency
	STR R4, [R1]						//Setting required clock triggers before next interrupt

	STR R4, [R2]						//Setting initial amount of clock triggers before interrupt

	LDR R5, =GPIO_EXTIPSELH
	LDR R6, =GPIO_EXTIFALL
	LDR R7, =GPIO_IEN

	ADD R5, R0, R5						//External Port Select High address
	ADD R6, R0, R6						//Falling Edge Register address
	ADD R7, R0, R7						//Interrupt enable address

	MOV R1, #15							//Corresponding to 0b1111
	LSL R1, R1, #4						//Shifting mask 4 to left
	MVN R2, R1							//Inverting bits, complete mask
	LDR R3, [R5]						//EXTIPHSELH content
	AND R3, R3, R2						//Masking EXTIPHSELH
	LDR R4, =PORT_B
	LSL R4, R4, #4
	ORR R3, R3, R4
	STR R3, [R5]						//Storing new EXTIPHSELH values

	MOV R1, #1
	LSL R1, #BUTTON_PIN
	LDR R2, [R6]
	LDR R3, [R7]
	ORR R2, R2, R1
	ORR R3, R3, R1
	STR R2, [R6]						//Storing new EXTIFALL
	STR R3, [R6]						//Storing new IEN

ButtonCheck:
	LDR R6, =GPIO_BASE
	LDR R7, =PORT_SIZE
	LDR R8, =BUTTON_PORT
	LDR R9, =BUTTON_PIN
	LDR R10, =GPIO_PORT_DIN

	MUL R7, R7, R8						//Creating offset to BUTTON PORT
	ADD R6, R6, R7						//Adding that offset
	ADD R6, R6, R10						//Adding offset to GPIO_PORT_DIN

	MOV R11, #1
	LSL R11, R11, R9 					//Creating mask for BUTTON CHECK
	LDR R12, [R6]						//Loading contents of button
	AND R12, R12, R11
	CMP R11, R12

	BEQ ButtonCheck

	LDR R7, =SYSTICK_BASE
	ADD R7, R7, #SYSTICK_VAL
	LDR R8, [R7]

StopLoop:
	STR R8, [R7]
	LDR R12, [R6]
	AND R12, R11, R12
	CMP R11, R12
	BNE StopLoop

	BEQ ButtonCheck





NOP // Behold denne p√• bunnen av fila
